// <auto-generated />
using System;
using CRM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRM.Data.Migrations
{
    [DbContext(typeof(dbContextCRM))]
    [Migration("20190920123656_Changes")]
    partial class Changes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRM.Core.Domain.Common.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("CustomAttributes");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("FirstName");

                    b.Property<int?>("HospitalMasterId");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("StateProvince");

                    b.Property<string>("ZipPostalCode");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HospitalMasterId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CRM.Core.Domain.Common.ReportSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("RowCount");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ReportSetting");
                });

            modelBuilder.Entity("CRM.Core.Domain.CompanyProfiles.CompanyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyProfileId");

                    b.Property<string>("DocumentName");

                    b.Property<string>("DocumentPath");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("CompanyDocument");
                });

            modelBuilder.Entity("CRM.Core.Domain.CompanyProfiles.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyAddressId");

                    b.Property<string>("Companyname");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<string>("License");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAddressId");

                    b.ToTable("CompanyProfile");
                });

            modelBuilder.Entity("CRM.Core.Domain.CompanyProfiles.DownloadHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentFormat");

                    b.Property<string>("DocumentName");

                    b.Property<string>("DocumentPath");

                    b.Property<string>("DocumentType");

                    b.Property<DateTime>("DownloadDateTime");

                    b.Property<int>("ProcessType");

                    b.Property<int>("ProcessTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DownloadHistory");
                });

            modelBuilder.Entity("CRM.Core.Domain.CompanyProfiles.PolicyAndProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyProfileId");

                    b.Property<bool>("IsPolicy");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProfileId");

                    b.ToTable("PolicyAndProcedure");
                });

            modelBuilder.Entity("CRM.Core.Domain.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("BillingAddressId");

                    b.Property<DateTime?>("CannotLoginUntilDateUtc");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<Guid>("CustomerGuid");

                    b.Property<int>("CustomerRoleId");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(1000);

                    b.Property<int>("FailedLoginAttempts");

                    b.Property<bool>("IsSystemAccount");

                    b.Property<DateTime>("LastActivityDateUtc");

                    b.Property<string>("LastIpAddress");

                    b.Property<DateTime?>("LastLoginDateUtc");

                    b.Property<bool>("RequireReLogin");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400);

                    b.Property<string>("Username")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CRM.Core.Domain.Customers.CustomerPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("PasswordFormat");

                    b.Property<int>("PasswordFormatId");

                    b.Property<string>("PasswordSalt");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPassword");
                });

            modelBuilder.Entity("CRM.Core.Domain.Customers.CustomerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SystemName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerRole");
                });

            modelBuilder.Entity("CRM.Core.Domain.Directory.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowsBilling");

                    b.Property<bool>("AllowsShipping");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NumericIsoCode");

                    b.Property<bool>("Published");

                    b.Property<bool>("SubjectToVat");

                    b.Property<string>("ThreeLetterIsoCode")
                        .HasMaxLength(3);

                    b.Property<string>("TwoLetterIsoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("CRM.Core.Domain.Directory.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("CRM.Core.Domain.Equipments.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("MachineName");

                    b.Property<string>("SerialNo");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("CRM.Core.Domain.Equipments.EquipmentDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Document");

                    b.Property<int>("EqpDocumentId");

                    b.Property<int>("EqpDocumentType");

                    b.Property<int>("EquipmentId");

                    b.Property<DateTime>("LastUpdated");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentDocuments");
                });

            modelBuilder.Entity("CRM.Core.Domain.Hospitals.HospitalMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactPerson");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<int?>("HospitalAddressId");

                    b.Property<string>("HospitalName");

                    b.Property<DateTime>("LastUpdated");

                    b.HasKey("Id");

                    b.HasIndex("HospitalAddressId");

                    b.ToTable("HospitalMaster");
                });

            modelBuilder.Entity("CRM.Core.Domain.Media.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltAttribute");

                    b.Property<string>("MimeType");

                    b.Property<byte[]>("PictureBinary");

                    b.Property<string>("PictureName");

                    b.Property<string>("Picturepath");

                    b.Property<byte[]>("ThumbnailBinary");

                    b.Property<string>("TitleAttribute");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("CRM.Core.Domain.Nurses.NurseDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Document");

                    b.Property<int>("DocumentType");

                    b.Property<int>("DocumentTypeId");

                    b.Property<int>("NurseMasterId");

                    b.HasKey("Id");

                    b.HasIndex("NurseMasterId");

                    b.ToTable("NurseDocuments");
                });

            modelBuilder.Entity("CRM.Core.Domain.Nurses.NurseMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastUpdated");

                    b.HasKey("Id");

                    b.ToTable("NurseMaster");
                });

            modelBuilder.Entity("CRM.Core.Domain.Printers.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrinterCloudSettingId");

                    b.Property<string>("PrinterId");

                    b.HasKey("Id");

                    b.HasIndex("PrinterCloudSettingId");

                    b.ToTable("Printer");
                });

            modelBuilder.Entity("CRM.Core.Domain.Printers.PrinterCloudSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyFilePath");

                    b.Property<string>("KeyFileSecreat");

                    b.Property<string>("ServiceAccountEmail");

                    b.Property<string>("ServiceName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PrinterCloudSetting");
                });

            modelBuilder.Entity("CRM.Core.Domain.Security.PermissionRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("PermissionRecord");
                });

            modelBuilder.Entity("CRM.Core.Domain.Security.PermissionRecord_Role_Mapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerRoleId");

                    b.Property<int>("PermissionRecordId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("PermissionRecordId");

                    b.ToTable("PermissionRecord_Role_Mapping");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentMaster.AutoText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AutoTextName");

                    b.Property<string>("Comment");

                    b.Property<int>("CommentTypeId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdated");

                    b.HasKey("Id");

                    b.HasIndex("CommentTypeId");

                    b.ToTable("AutoText");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentMaster.CommentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentTypeName");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdated");

                    b.HasKey("Id");

                    b.ToTable("CommentType");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentMaster.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<string>("DiagnosisName");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastUpdated");

                    b.HasKey("Id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.DoctorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("DoctorName");

                    b.Property<int>("EducatioPreTreatment");

                    b.Property<int>("EducatioPreTreatmentId");

                    b.Property<bool?>("OrdersReviewed");

                    b.Property<bool>("OutPatient");

                    b.Property<string>("Room");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("DoctorInfo");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.FinalValuesAndAccessPostAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AC");

                    b.Property<string>("BP");

                    b.Property<bool>("ChlorhexidineCapApplied");

                    b.Property<int?>("Collet");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("FluidBalance");

                    b.Property<bool>("Heparin");

                    b.Property<int?>("Inlet");

                    b.Property<bool>("Intact");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<bool>("NewDressing");

                    b.Property<int?>("P");

                    b.Property<int?>("Plasma");

                    b.Property<int?>("R");

                    b.Property<bool>("Reinforced");

                    b.Property<bool>("Saline");

                    b.Property<int?>("T");

                    b.Property<int?>("Time");

                    b.Property<int?>("TreatmentRecordId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordId");

                    b.ToTable("FinalValuesAndAccessPostAssessment");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.LabValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<decimal?>("EBV");

                    b.Property<decimal?>("ECV10");

                    b.Property<decimal?>("ECV15");

                    b.Property<decimal?>("EPV");

                    b.Property<decimal?>("HGB");

                    b.Property<decimal?>("HTC");

                    b.Property<decimal?>("Height");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<decimal?>("PLT");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.Property<decimal?>("WBC");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("LabValues");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.MachineMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlarmCheck");

                    b.Property<bool>("CleanedFrontDoorSensors");

                    b.Property<bool>("CleanedPressurePODSSeals");

                    b.Property<bool>("CleanedSensors");

                    b.Property<bool>("CleanedTrackDoors");

                    b.Property<string>("CorrectiveAction");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EquipSerial");

                    b.Property<int?>("EquipmentId");

                    b.Property<DateTime>("ExpDate");

                    b.Property<int>("KitType");

                    b.Property<int?>("KitTypeId");

                    b.Property<string>("KitTypeSerial");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<bool>("MachineClean");

                    b.Property<DateTime>("PMDate");

                    b.Property<bool>("PrimeSuccess");

                    b.Property<DateTime>("SafetyChkDate");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("MachineMaster");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("Dosage");

                    b.Property<string>("Name");

                    b.Property<int?>("PostTreatmentId");

                    b.Property<string>("Route");

                    b.HasKey("Id");

                    b.HasIndex("PostTreatmentId");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.NoteAndReportMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<bool>("IsTreatmentCompletedWOIncident");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Note");

                    b.Property<string>("ReportGivenTo");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("NoteAndReportMaster");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.OtherLabValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentName");

                    b.Property<decimal>("ContentValue");

                    b.Property<int?>("LabValuesId");

                    b.HasKey("Id");

                    b.HasIndex("LabValuesId");

                    b.ToTable("OtherLabValues");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PatientInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Deleted");

                    b.Property<int>("DiagnosisId");

                    b.Property<int>("HospitalId");

                    b.Property<int?>("HospitalMasterId");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int>("NurseId");

                    b.Property<int?>("NurseMasterId");

                    b.Property<int?>("PolicyAndProcedureId");

                    b.Property<int>("ProcedureId");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("HospitalMasterId");

                    b.HasIndex("NurseMasterId");

                    b.HasIndex("PolicyAndProcedureId");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("PatientInfo");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PatientMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<bool>("Deleted");

                    b.Property<int>("Gender");

                    b.Property<int>("GenderId");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("MR");

                    b.Property<int?>("PatientAddressId");

                    b.Property<string>("PatientName");

                    b.HasKey("Id");

                    b.HasIndex("PatientAddressId");

                    b.ToTable("PatientMaster");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PostTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsBiohazardWasteDisposed");

                    b.Property<bool>("IsEquipmentCleanedAndDisinfected");

                    b.Property<bool>("IsPostCVCCarePerPolicy");

                    b.Property<bool>("IsRinseBackComplete");

                    b.Property<bool>("IsSideRailsUp");

                    b.Property<int?>("TreatmentRecordId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordId");

                    b.ToTable("PostTreatment");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PreTreatmentAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BleendAutoTextId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("EdemaAutoTextId");

                    b.Property<bool>("IsAlert");

                    b.Property<bool>("IsBleeding");

                    b.Property<bool>("IsComatose");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEasy");

                    b.Property<bool>("IsEdema");

                    b.Property<bool>("IsFiO2");

                    b.Property<bool>("IsLabored");

                    b.Property<bool>("IsLethargic");

                    b.Property<bool>("IsMask");

                    b.Property<bool>("IsNC");

                    b.Property<bool>("IsNumbness");

                    b.Property<bool>("IsRoomAir");

                    b.Property<bool>("IsVent");

                    b.Property<bool>("IsWeakness");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int?>("LocationAutoTextId");

                    b.Property<int?>("LungSoundsAutoTextId");

                    b.Property<int?>("NumbnessAutoTextId");

                    b.Property<string>("OSat");

                    b.Property<string>("OrientedX");

                    b.Property<int?>("PainAutoTextId");

                    b.Property<int?>("RythmAutoTextId");

                    b.Property<int?>("SkinAutoTextId");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.Property<int?>("WeaknessAutoTextId");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("PreTreatmentAssessment");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PreTreatmentCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlarmTest");

                    b.Property<bool>("BloodConsent");

                    b.Property<bool>("InformedConsent");

                    b.Property<int>("MachinePrimeId");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.Property<bool>("UniversalPrecautions");

                    b.Property<int>("machinePrimed");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("PreTreatmentCheck");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.RunValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACFlowRate");

                    b.Property<int>("ACFlowVol");

                    b.Property<string>("BP");

                    b.Property<int>("CollectFlowRate");

                    b.Property<int>("CollectFlowVol");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<int>("IntelFlowRate");

                    b.Property<int>("IntelFlowVol");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("LotNo");

                    b.Property<int>("P");

                    b.Property<int>("PlasmaFlowRate");

                    b.Property<int>("PlasmaFlowVol");

                    b.Property<int>("R");

                    b.Property<int>("ReplaceFluid");

                    b.Property<int>("ReplaceFluidId");

                    b.Property<TimeSpan>("RunTime");

                    b.Property<int>("T");

                    b.Property<int?>("TreatmentRecordMasterId");

                    b.Property<decimal>("WarmerTemp");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordMasterId");

                    b.ToTable("RunValues");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.SuppliesAndAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ACDLot");

                    b.Property<DateTime>("ACDLotExpDate");

                    b.Property<bool>("ACEInhibitors");

                    b.Property<bool>("BloodWarmer");

                    b.Property<bool>("CVC");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateDC");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("LastDoseDate");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Locations");

                    b.Property<bool>("MedsReviewed");

                    b.Property<string>("NSPrimeLot");

                    b.Property<DateTime>("NSPrimeLotExpDate");

                    b.Property<bool>("Peripheral");

                    b.Property<string>("Rate");

                    b.Property<string>("Serial");

                    b.Property<decimal>("TEMP");

                    b.Property<int?>("TreatmentRecordId");

                    b.Property<string>("Type");

                    b.Property<bool>("Vortex");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentRecordId");

                    b.ToTable("SuppliesAndAccess");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int?>("PatientMasterId");

                    b.Property<string>("TreatmentRecordNo");

                    b.Property<int>("TreatmentStatus");

                    b.Property<int>("TreatmentStatusId");

                    b.HasKey("Id");

                    b.HasIndex("PatientMasterId");

                    b.ToTable("TreatmentRecordMaster");
                });

            modelBuilder.Entity("CRM.Core.Domain.Common.Address", b =>
                {
                    b.HasOne("CRM.Core.Domain.Customers.Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("CRM.Core.Domain.Hospitals.HospitalMaster")
                        .WithMany("Addresses")
                        .HasForeignKey("HospitalMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.CompanyProfiles.CompanyDocument", b =>
                {
                    b.HasOne("CRM.Core.Domain.CompanyProfiles.CompanyProfile", "CompanyProfile")
                        .WithMany("CompanyDocuments")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.CompanyProfiles.CompanyProfile", b =>
                {
                    b.HasOne("CRM.Core.Domain.Common.Address", "CompanyAddress")
                        .WithMany()
                        .HasForeignKey("CompanyAddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.CompanyProfiles.PolicyAndProcedure", b =>
                {
                    b.HasOne("CRM.Core.Domain.CompanyProfiles.CompanyProfile", "CompanyProfile")
                        .WithMany("PoliciesAndProcedures")
                        .HasForeignKey("CompanyProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.Customers.Customer", b =>
                {
                    b.HasOne("CRM.Core.Domain.Common.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("CRM.Core.Domain.Customers.CustomerRole", "CustomerRole")
                        .WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.Customers.CustomerPassword", b =>
                {
                    b.HasOne("CRM.Core.Domain.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.Customers.CustomerRole", b =>
                {
                    b.HasOne("CRM.Core.Domain.Customers.Customer")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("CRM.Core.Domain.Directory.StateProvince", b =>
                {
                    b.HasOne("CRM.Core.Domain.Directory.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.Equipments.EquipmentDocuments", b =>
                {
                    b.HasOne("CRM.Core.Domain.Equipments.Equipment", "Equipment")
                        .WithMany("EquipmentDocuments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.Hospitals.HospitalMaster", b =>
                {
                    b.HasOne("CRM.Core.Domain.Common.Address", "HospitalAddress")
                        .WithMany()
                        .HasForeignKey("HospitalAddressId");
                });

            modelBuilder.Entity("CRM.Core.Domain.Nurses.NurseDocuments", b =>
                {
                    b.HasOne("CRM.Core.Domain.Nurses.NurseMaster", "NurseMaster")
                        .WithMany("NurseDocuments")
                        .HasForeignKey("NurseMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.Printers.Printer", b =>
                {
                    b.HasOne("CRM.Core.Domain.Printers.PrinterCloudSetting", "PrinterCloudSetting")
                        .WithMany("Printers")
                        .HasForeignKey("PrinterCloudSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.Security.PermissionRecord_Role_Mapping", b =>
                {
                    b.HasOne("CRM.Core.Domain.Customers.CustomerRole", "CustomerRole")
                        .WithMany("PermissionRecord_Role_Mapping")
                        .HasForeignKey("CustomerRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Core.Domain.Security.PermissionRecord", "PermissionRecord")
                        .WithMany("PermissionRecord_Role_Mapping")
                        .HasForeignKey("PermissionRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentMaster.AutoText", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentMaster.CommentType", "CommentType")
                        .WithMany()
                        .HasForeignKey("CommentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.DoctorInfo", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.FinalValuesAndAccessPostAssessment", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.LabValues", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.MachineMaster", b =>
                {
                    b.HasOne("CRM.Core.Domain.Equipments.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.Medication", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.PostTreatment", "PostTreatment")
                        .WithMany("Medications")
                        .HasForeignKey("PostTreatmentId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.NoteAndReportMaster", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecordMaster")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.OtherLabValues", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.LabValues", "LabValues")
                        .WithMany("OtherLabValues")
                        .HasForeignKey("LabValuesId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PatientInfo", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentMaster.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.Core.Domain.Hospitals.HospitalMaster", "HospitalMaster")
                        .WithMany()
                        .HasForeignKey("HospitalMasterId");

                    b.HasOne("CRM.Core.Domain.Nurses.NurseMaster", "NurseMaster")
                        .WithMany()
                        .HasForeignKey("NurseMasterId");

                    b.HasOne("CRM.Core.Domain.CompanyProfiles.PolicyAndProcedure", "PolicyAndProcedure")
                        .WithMany()
                        .HasForeignKey("PolicyAndProcedureId");

                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PatientMaster", b =>
                {
                    b.HasOne("CRM.Core.Domain.Common.Address", "PatientAddress")
                        .WithMany()
                        .HasForeignKey("PatientAddressId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PostTreatment", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PreTreatmentAssessment", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.PreTreatmentCheck", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.RunValues", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordMasterId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.SuppliesAndAccess", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", "TreatmentRecord")
                        .WithMany()
                        .HasForeignKey("TreatmentRecordId");
                });

            modelBuilder.Entity("CRM.Core.Domain.TreatmentRecords.TreatmentRecordMaster", b =>
                {
                    b.HasOne("CRM.Core.Domain.TreatmentRecords.PatientMaster", "PatientMaster")
                        .WithMany("TreatmentRecordMaster")
                        .HasForeignKey("PatientMasterId");
                });
#pragma warning restore 612, 618
        }
    }
}
